//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TGNetService_NetRequestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TGNetService.NetRequest), typeof(System.Object));
		L.RegFunction("New", _CreateTGNetService_NetRequest);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Type", get_Type, set_Type);
		L.RegVar("Data", get_Data, set_Data);
		L.RegVar("Param", get_Param, set_Param);
		L.RegVar("Handler", get_Handler, set_Handler);
		L.RegVar("FlowOpt", get_FlowOpt, set_FlowOpt);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTGNetService_NetRequest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TGNetService.NetRequest obj = new TGNetService.NetRequest();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TGNetService.NetRequest.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			string ret = obj.Type;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			byte[] ret = obj.Data;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Param(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			object ret = obj.Param;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Param on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Handler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			TGNetService.NetEventHanlder ret = obj.Handler;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Handler on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlowOpt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			bool ret = obj.FlowOpt;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FlowOpt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.Data = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Param(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Param = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Param on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Handler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			TGNetService.NetEventHanlder arg0 = (TGNetService.NetEventHanlder)ToLua.CheckDelegate<TGNetService.NetEventHanlder>(L, 2);
			obj.Handler = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Handler on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FlowOpt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService.NetRequest obj = (TGNetService.NetRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FlowOpt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FlowOpt on a nil value");
		}
	}
}

